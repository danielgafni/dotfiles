; (defwidget bar []
;   (centerbox :orientation "h"
;     (workspaces)
;     (music)
;     (sidestuff)))

; (defwidget sidestuff []
;   (box :class "sidestuff" :orientation "h" :space-evenly false :halign "end"
;     (metric :label "üîä"
;             :value volume
;             :onchange "amixer -D pulse sset Master {}%")
;     (metric :label "Ô°ö"
;             :value {EWW_RAM.used_mem_perc}
;             :onchange "")
;     (metric :label "üíæ"
;             :value {round((1 - (EWW_DISK["/"].free / EWW_DISK["/"].total)) * 100, 0)}
;             :onchange "")
;     time))

; (defwidget workspaces []
;   (box :class "workspaces"
;        :orientation "h"
;        :space-evenly true
;        :halign "start"
;        :spacing 10
;     (button :onclick "hyprctl dispatch workspace 1" 1)
;     (button :onclick "hyprctl dispatch workspace 2" 2)
;     (button :onclick "hyprctl dispatch workspace 3" 3)
;     (button :onclick "hyprctl dispatch workspace 4" 4)
;     (button :onclick "hyprctl dispatch workspace 5" 5)
;     (button :onclick "hyprctl dispatch workspace 6" 6)
;     (button :onclick "hyprctl dispatch workspace 7" 7)
;     (button :onclick "hyprctl dispatch workspace 8" 8)
;     (button :onclick "hyprctl dispatch workspace 9" 9)))

; (defwidget music []
;   (box :class "music"
;        :orientation "h"
;        :space-evenly false
;        :halign "center"
;     {music != "" ? "üéµ${music}" : ""}))


; (defwidget metric [label value onchange]
;   (box :orientation "h"
;        :class "metric"
;        :space-evenly false
;     (box :class "label" label)
;     (scale :min 0
;            :max 101
;            :active {onchange != ""}
;            :value value
;            :onchange onchange)))



; (deflisten music :initial ""
;   "playerctl --follow metadata --format '{{ artist }} - {{ title }}' || true")

; (defpoll volume :interval "1s"
;   "scripts/getvol")

; (defpoll time :interval "10s"
;   "date '+%H:%M %b %d, %Y'")

;                       :y "0%"
;                       :width "90%"
;                       :height "15px"
;                       :anchor "top center")
;   :reserve (struts :side "top" :distance "4%")
;   (bar))

;; ------------------- Uptime --------------------


;; Uptime vars
(defpoll UPHOUR :interval "5s" `gaf uptime hours`)
(defpoll UPMIN :interval "5s" `gaf uptime minutes`)

;; uptime
(defwidget uptime [] 
	(box :class "genwin" 
		(box :orientation "h" :halign "center" :spacing 40 :space-evenly "false" :vexpand "false" :hexpand "false" 
			(label :class "icontimer" :valign "center" :text "Ô®ö")
			(box :orientation "v" :valign "center" :spacing 0 :space-evenly "false" :vexpand "false" :hexpand "false" 
				(label :class "uphour" :halign "start" :wrap "true" :limit-width 25 :text "${UPHOUR}h")
				(label :class "upmin" :halign "start" :wrap "true" :limit-width 25 :text "${UPMIN}m")))))

;; uptime
(defwindow uptime :stacking "bg" :focusable "false" :screen 1 :monitor 0
	    :geometry (geometry :x "90%" :y "90%" :width 200 :height 150)
					(uptime))

;; ------------------- Weather --------------------

;; Weather vars
(defpoll WEATHER_INFO :interval "15m" :initial '{"icon":"?","quote":"The weather is not clear to me...","advice":"Let\'s try again...","temp":10,"hex":"#adadff","description":"unknown"}' `gaf weather` )

;; weather
(defwidget weather [] 
	(box :class "genwin" 
		(box :orientation "v" :spacing 10 :space-evenly "false" :vexpand "false" :hexpand "false" 
			(box :orientation "h" :vexpand "false" :hexpand "false" 
				(label :class "iconweather" :halign "start" :style "color: ${WEATHER_INFO.hex};" :text "${WEATHER_INFO.icon}")
				(label :class "label_temp" :halign "end" :text "üå°Ô∏è ${round(WEATHER_INFO.temp, 0)}¬∞C"))
			(box :orientation "v" :spacing 10 :halign "center" :space-evenly "false" :vexpand "false" :hexpand "false" 
				(label :class "label_description" :text "${WEATHER_INFO.description}")
				(label :class "label_quote" :text "${WEATHER_INFO.quote}")
				(label :class "label_quote" :text "${WEATHER_INFO.advice}")))))

;; weather
(defwindow weather :stacking "bg" :focusable "false" :screen 1 :monitor 0
	    :geometry (geometry :x "50%" :y "9%" :width 200 :height 200)
					(weather))

;; ------------------- Calendar --------------------

(defpoll CALENDAR_INFO :interval "15s" :initial '{"year": "0000", "month": "00", "hour": "00", "minute": "00", "weekday": "Unk"}' `gaf calendar`)

(defwidget custom-calendar []
  (box :class "genwin"
    (box :orientation "h" :spacing 10 :space-evenly "false" :vexpand "false" :hexpand "false"
      (label :class "calendar_clock_hour" :halign "start" :text "${CALENDAR_INFO.hour}")
      (label :class "calendar_clock_colon" :halign "start" :text ":")
      (label :class "calendar_clock_minute" :halign "start" :text "${CALENDAR_INFO.minute}"))
   (box :orientation "v" :spacing 10 :space-evenly "false" :vexpand "false" :hexpand "false"
      (label :class "calendar_month" :halign "start" :text "${CALENDAR_INFO.month}")
      (label :class "calendar_day" :halign "end" :text "${CALENDAR_INFO.day}")
      (label :class "calendar_weekday" :halign "center" :text "${CALENDAR_INFO.weekday}"))))

(defwindow calendar :stacking "bg" :focusable "false" :screen 1 :monitor 0
  :geometry (geometry :x "40%" :y "1%" :width 200 :height 150)
  (custom-calendar))

